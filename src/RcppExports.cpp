// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// blfdr_fn
arma::vec blfdr_fn(double u_main, arma::vec unif_dat, double eta1, double eta2, double eta3, double eta4, arma::vec extraParam);
RcppExport SEXP _zap_blfdr_fn(SEXP u_mainSEXP, SEXP unif_datSEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta3SEXP, SEXP eta4SEXP, SEXP extraParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type u_main(u_mainSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type unif_dat(unif_datSEXP);
    Rcpp::traits::input_parameter< double >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< double >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< double >::type eta3(eta3SEXP);
    Rcpp::traits::input_parameter< double >::type eta4(eta4SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    rcpp_result_gen = Rcpp::wrap(blfdr_fn(u_main, unif_dat, eta1, eta2, eta3, eta4, extraParam));
    return rcpp_result_gen;
END_RCPP
}
// blfdr_stat
double blfdr_stat(double U, double eta1, double eta2, double eta3, double eta4, arma::vec extraParam);
RcppExport SEXP _zap_blfdr_stat(SEXP USEXP, SEXP eta1SEXP, SEXP eta2SEXP, SEXP eta3SEXP, SEXP eta4SEXP, SEXP extraParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    Rcpp::traits::input_parameter< double >::type eta1(eta1SEXP);
    Rcpp::traits::input_parameter< double >::type eta2(eta2SEXP);
    Rcpp::traits::input_parameter< double >::type eta3(eta3SEXP);
    Rcpp::traits::input_parameter< double >::type eta4(eta4SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    rcpp_result_gen = Rcpp::wrap(blfdr_stat(U, eta1, eta2, eta3, eta4, extraParam));
    return rcpp_result_gen;
END_RCPP
}
// trunc_log_arma
arma::vec trunc_log_arma(arma::vec U);
RcppExport SEXP _zap_trunc_log_arma(SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(trunc_log_arma(U));
    return rcpp_result_gen;
END_RCPP
}
// createParaMat
arma::mat createParaMat(arma::vec param, arma::mat X_tilde);
RcppExport SEXP _zap_createParaMat(SEXP paramSEXP, SEXP X_tildeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param(paramSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    rcpp_result_gen = Rcpp::wrap(createParaMat(param, X_tilde));
    return rcpp_result_gen;
END_RCPP
}
// form_Hmat_unmask
arma::mat form_Hmat_unmask(arma::vec U, arma::mat paraMat, arma::vec extraParam);
RcppExport SEXP _zap_form_Hmat_unmask(SEXP USEXP, SEXP paraMatSEXP, SEXP extraParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type paraMat(paraMatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    rcpp_result_gen = Rcpp::wrap(form_Hmat_unmask(U, paraMat, extraParam));
    return rcpp_result_gen;
END_RCPP
}
// form_Hmat_unmask_init
arma::mat form_Hmat_unmask_init(arma::vec U, arma::vec beta0, arma::mat piMat, arma::mat X_tilde, arma::vec extraParam);
RcppExport SEXP _zap_form_Hmat_unmask_init(SEXP USEXP, SEXP beta0SEXP, SEXP piMatSEXP, SEXP X_tildeSEXP, SEXP extraParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type piMat(piMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    rcpp_result_gen = Rcpp::wrap(form_Hmat_unmask_init(U, beta0, piMat, X_tilde, extraParam));
    return rcpp_result_gen;
END_RCPP
}
// form_Hmat_Yab_mask_init
Rcpp::List form_Hmat_Yab_mask_init(arma::vec U_mask, arma::vec U_mirror_mask, arma::vec beta0, arma::mat piMat, arma::mat X_tilde, arma::vec extraParam);
RcppExport SEXP _zap_form_Hmat_Yab_mask_init(SEXP U_maskSEXP, SEXP U_mirror_maskSEXP, SEXP beta0SEXP, SEXP piMatSEXP, SEXP X_tildeSEXP, SEXP extraParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type U_mask(U_maskSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U_mirror_mask(U_mirror_maskSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type piMat(piMatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    rcpp_result_gen = Rcpp::wrap(form_Hmat_Yab_mask_init(U_mask, U_mirror_mask, beta0, piMat, X_tilde, extraParam));
    return rcpp_result_gen;
END_RCPP
}
// form_Hmat_Yab_mask
Rcpp::List form_Hmat_Yab_mask(arma::vec U_mask, arma::vec U_mirror_mask, arma::mat paraMat, arma::vec extraParam);
RcppExport SEXP _zap_form_Hmat_Yab_mask(SEXP U_maskSEXP, SEXP U_mirror_maskSEXP, SEXP paraMatSEXP, SEXP extraParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type U_mask(U_maskSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U_mirror_mask(U_mirror_maskSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type paraMat(paraMatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    rcpp_result_gen = Rcpp::wrap(form_Hmat_Yab_mask(U_mask, U_mirror_mask, paraMat, extraParam));
    return rcpp_result_gen;
END_RCPP
}
// overall_Hmat
arma::mat overall_Hmat(arma::mat Hmat_mask, arma::mat Hmat_unmask, arma::uvec mask_set, arma::uvec unmask_set);
RcppExport SEXP _zap_overall_Hmat(SEXP Hmat_maskSEXP, SEXP Hmat_unmaskSEXP, SEXP mask_setSEXP, SEXP unmask_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Hmat_mask(Hmat_maskSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Hmat_unmask(Hmat_unmaskSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mask_set(mask_setSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type unmask_set(unmask_setSEXP);
    rcpp_result_gen = Rcpp::wrap(overall_Hmat(Hmat_mask, Hmat_unmask, mask_set, unmask_set));
    return rcpp_result_gen;
END_RCPP
}
// overall_Ymat
arma::mat overall_Ymat(arma::mat Ymat_mask, arma::vec U_unmask, arma::uvec mask_set, arma::uvec unmask_set);
RcppExport SEXP _zap_overall_Ymat(SEXP Ymat_maskSEXP, SEXP U_unmaskSEXP, SEXP mask_setSEXP, SEXP unmask_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Ymat_mask(Ymat_maskSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U_unmask(U_unmaskSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type mask_set(mask_setSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type unmask_set(unmask_setSEXP);
    rcpp_result_gen = Rcpp::wrap(overall_Ymat(Ymat_mask, U_unmask, mask_set, unmask_set));
    return rcpp_result_gen;
END_RCPP
}
// neg_LogLike_LeftBeta
double neg_LogLike_LeftBeta(arma::vec beta_l, arma::vec U, arma::mat X_tilde, double gamma_l);
RcppExport SEXP _zap_neg_LogLike_LeftBeta(SEXP beta_lSEXP, SEXP USEXP, SEXP X_tildeSEXP, SEXP gamma_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta_l(beta_lSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_l(gamma_lSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_LogLike_LeftBeta(beta_l, U, X_tilde, gamma_l));
    return rcpp_result_gen;
END_RCPP
}
// neg_LogLike_LeftBeta_grad
arma::vec neg_LogLike_LeftBeta_grad(arma::vec beta_l, arma::vec U, arma::mat X_tilde, double gamma_l);
RcppExport SEXP _zap_neg_LogLike_LeftBeta_grad(SEXP beta_lSEXP, SEXP USEXP, SEXP X_tildeSEXP, SEXP gamma_lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta_l(beta_lSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_l(gamma_lSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_LogLike_LeftBeta_grad(beta_l, U, X_tilde, gamma_l));
    return rcpp_result_gen;
END_RCPP
}
// neg_LogLike_RightBeta
double neg_LogLike_RightBeta(arma::vec beta_r, arma::vec U, arma::mat X_tilde, double gamma_r);
RcppExport SEXP _zap_neg_LogLike_RightBeta(SEXP beta_rSEXP, SEXP USEXP, SEXP X_tildeSEXP, SEXP gamma_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta_r(beta_rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_r(gamma_rSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_LogLike_RightBeta(beta_r, U, X_tilde, gamma_r));
    return rcpp_result_gen;
END_RCPP
}
// neg_LogLike_RightBeta_grad
arma::vec neg_LogLike_RightBeta_grad(arma::vec beta_r, arma::vec U, arma::mat X_tilde, double gamma_r);
RcppExport SEXP _zap_neg_LogLike_RightBeta_grad(SEXP beta_rSEXP, SEXP USEXP, SEXP X_tildeSEXP, SEXP gamma_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type beta_r(beta_rSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_r(gamma_rSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_LogLike_RightBeta_grad(beta_r, U, X_tilde, gamma_r));
    return rcpp_result_gen;
END_RCPP
}
// LogLike_asymp
double LogLike_asymp(arma::vec U, arma::mat paraMat, arma::vec extraParam);
RcppExport SEXP _zap_LogLike_asymp(SEXP USEXP, SEXP paraMatSEXP, SEXP extraParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::mat >::type paraMat(paraMatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    rcpp_result_gen = Rcpp::wrap(LogLike_asymp(U, paraMat, extraParam));
    return rcpp_result_gen;
END_RCPP
}
// neg_Q_fn_finite_beta_part
double neg_Q_fn_finite_beta_part(arma::vec param_beta, arma::mat Ymat, arma::mat Hmat, arma::vec extraParam, arma::mat X_tilde);
RcppExport SEXP _zap_neg_Q_fn_finite_beta_part(SEXP param_betaSEXP, SEXP YmatSEXP, SEXP HmatSEXP, SEXP extraParamSEXP, SEXP X_tildeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param_beta(param_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ymat(YmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Hmat(HmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_Q_fn_finite_beta_part(param_beta, Ymat, Hmat, extraParam, X_tilde));
    return rcpp_result_gen;
END_RCPP
}
// neg_Q_fn_finite_beta_part_grad_cpp
arma::vec neg_Q_fn_finite_beta_part_grad_cpp(arma::vec param_beta, arma::mat Ymat, arma::mat Hmat, arma::vec extraParam, arma::mat X_tilde);
RcppExport SEXP _zap_neg_Q_fn_finite_beta_part_grad_cpp(SEXP param_betaSEXP, SEXP YmatSEXP, SEXP HmatSEXP, SEXP extraParamSEXP, SEXP X_tildeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type param_beta(param_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Ymat(YmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Hmat(HmatSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extraParam(extraParamSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X_tilde(X_tildeSEXP);
    rcpp_result_gen = Rcpp::wrap(neg_Q_fn_finite_beta_part_grad_cpp(param_beta, Ymat, Hmat, extraParam, X_tilde));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_zap_blfdr_fn", (DL_FUNC) &_zap_blfdr_fn, 7},
    {"_zap_blfdr_stat", (DL_FUNC) &_zap_blfdr_stat, 6},
    {"_zap_trunc_log_arma", (DL_FUNC) &_zap_trunc_log_arma, 1},
    {"_zap_createParaMat", (DL_FUNC) &_zap_createParaMat, 2},
    {"_zap_form_Hmat_unmask", (DL_FUNC) &_zap_form_Hmat_unmask, 3},
    {"_zap_form_Hmat_unmask_init", (DL_FUNC) &_zap_form_Hmat_unmask_init, 5},
    {"_zap_form_Hmat_Yab_mask_init", (DL_FUNC) &_zap_form_Hmat_Yab_mask_init, 6},
    {"_zap_form_Hmat_Yab_mask", (DL_FUNC) &_zap_form_Hmat_Yab_mask, 4},
    {"_zap_overall_Hmat", (DL_FUNC) &_zap_overall_Hmat, 4},
    {"_zap_overall_Ymat", (DL_FUNC) &_zap_overall_Ymat, 4},
    {"_zap_neg_LogLike_LeftBeta", (DL_FUNC) &_zap_neg_LogLike_LeftBeta, 4},
    {"_zap_neg_LogLike_LeftBeta_grad", (DL_FUNC) &_zap_neg_LogLike_LeftBeta_grad, 4},
    {"_zap_neg_LogLike_RightBeta", (DL_FUNC) &_zap_neg_LogLike_RightBeta, 4},
    {"_zap_neg_LogLike_RightBeta_grad", (DL_FUNC) &_zap_neg_LogLike_RightBeta_grad, 4},
    {"_zap_LogLike_asymp", (DL_FUNC) &_zap_LogLike_asymp, 3},
    {"_zap_neg_Q_fn_finite_beta_part", (DL_FUNC) &_zap_neg_Q_fn_finite_beta_part, 5},
    {"_zap_neg_Q_fn_finite_beta_part_grad_cpp", (DL_FUNC) &_zap_neg_Q_fn_finite_beta_part_grad_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_zap(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
